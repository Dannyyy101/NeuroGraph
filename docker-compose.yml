services:
  db:
    container_name: "${BRANCH_NAME}postgres"
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
      POSTGRES_DB: development
    volumes:
      - db:/data/postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d development" ]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    container_name: "${BRANCH_NAME}backend"
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/development
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_APPLICATION_NAME: backend
    ports:
      - "${SPRING_PORT}:8080"
    depends_on:
      - db
    networks:
      - app-network

  frontend:
    container_name: "${BRANCH_NAME}frontend"
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    environment:
      NEXT_PUBLIC_BACKEND_URL: ${NEXT_PUBLIC_BACKEND_URL}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      AUTH_SECRET: ${AUTH_SECRET}
      AUTH_GOOGLE_ID: ${AUTH_GOOGLE_ID}
      AUTH_GOOGLE_SECRET: ${AUTH_GOOGLE_SECRET}
      DB_HOST: ${DB_HOST}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_DATABASE: development
    ports:
      - "${NEXTJS_PORT}:3000"
    networks:
      - app-network
    depends_on:
      - backend

networks:
  app-network:
    driver: bridge

volumes:
  db: